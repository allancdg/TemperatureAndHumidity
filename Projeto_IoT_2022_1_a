#include "DHT.h"
#include "WiFi.h"
#include "PubSubClient.h"
#include "WiFiClient.h"

#define DHTTYPE DHT11

// ----------------------------------------------------------------------- //

//Definição dos pinos
int DHTPin = 4;

//Configuração do sensor DHT11
DHT dht(DHTPin, DHTTYPE);

// ----------------------------------------------------------------------- //

//Declaração das variáveis
float Temperature;
float Humidity;
String measurementTime = "";
String lineData = "";

WiFiClient ESPWiFiClient;
PubSubClient mqttClient(ESPWiFiClient);

const char* wifi_ssid = "Sergio_2G";
const char* wifi_password = "upanema23";
int wifi_timeout = 10000;

const char* mqtt_broker = "broker.hivemq.com";
const int mqtt_port = 1883;
int mqtt_timeout = 10000;

// ----------------------------------------------------------------------- // 

//FUNÇÕES
//CONFIGURAÇÃO DA WIFI
void connectWifi(){
  WiFi.mode(WIFI_STA); // "Station mode": permite que o ESP32 seja um cliente
  WiFi.begin(wifi_ssid, wifi_password);
  Serial.print("Conectando à rede WiFi ..");

  //Captura o tempo, em milisegundos, desde que o programa começou a rodar o 'conectWifi'
  unsigned long startTime = millis();

  //Enquanto o status da conexão for diferente de conectado e não tenha ultrapassado o timeout
  while(WiFi.status() != WL_CONNECTED && (millis() - startTime < wifi_timeout)){
    Serial.print(".");
    delay(1000);
  }
  Serial.println();

  //Informa se a conexão falhou ou, caso tenha conectado, informa o IP
  if(WiFi.status() != WL_CONNECTED){
    Serial.println("Conexion has failed!");
  } else {
    Serial.print("conected with IP: ");
    Serial.println(WiFi.localIP());
  }
}

// ----------------------------------------------------------------------- //

//CONFIGURAÇÃO DO MQTT
void configMQTT(){
  Serial.println("Conectando ao broker MQTT ...");
  mqttClient.setServer(mqtt_broker, mqtt_port);
  Serial.println("Conectado ao broker!");
}

void connectMQTT(){
  Serial.print("Conectando ao MQTT Broker...");

  unsigned long startTime = millis();
  while(!mqttClient.connected() && (millis() - startTime < mqtt_timeout)){
    Serial.print(".");
    String clientId = "ESP32ClientAllan-";
    clientId += String(random(0xffff), HEX); // Geração de complemento do nome randomico

    if(mqttClient.connect(clientId.c_str())){
      Serial.println();
      Serial.print("Conectado ao broker MQTT!");
    }
    delay(1000);
  }
  Serial.println();
}

// ----------------------------------------------------------------------- //

//TRANSFORMAÇÃO DO RESULTADO EM STRING
String retornaComoString(float Temperatura, float Humidade, String tempoDaMedicao){
  lineData += "Temperatura: ";
  lineData += String(Temperatura, 1);
  lineData += "ºC \t Humidade: ";
  lineData += String(Humidade);
  lineData += "% \t Data: ";
  lineData += tempoDaMedicao;
  lineData += "\n";
  return lineData;
}

// ----------------------------------------------------------------------- //

void setup() {
  Serial.begin(115200);
  delay(1000);

  //Configuração de INPUT/OUTPUT dos sensores/atuadores 
  //Sensor DHT11 -> Pino D4 -> Recebimento dos dados
  pinMode(DHTPin, INPUT);

  //Inicializa o sensor DHT11
  dht.begin();

  //Conecta a wifi e configura conexão com broker
  connectWifi();
  if(WiFi.status() == WL_CONNECTED){
    configMQTT();
  }
}

// ----------------------------------------------------------------------- //

void loop() {
 //Leitura dos dados
  Temperature = dht.readTemperature();
  Humidity = dht.readHumidity();
  measurementTime = "01/01/2022 - 10:20:30 "; // VERIFICAR FORMA DE OBTER A DATA/HORA

//Escrita na porta Serial
  /*Serial.print("Temperatura: ");
  Serial.print(Temperature);
  Serial.print("ºC \t Humidade: ");
  Serial.print(Humidity);
  Serial.print("% \t Data: ");
  Serial.print(measurementTime);
  Serial.println();*/
  
  String lineDataFull = retornaComoString(Temperature, Humidity, measurementTime);
  Serial.println(lineDataFull);
  
  delay(5000);

  if(!mqttClient.connected()){
    connectMQTT();
  }

  if(mqttClient.connected()){
    mqttClient.loop();
    //mqttClient.publish("/imd0902/projeto/freezer", lineDataFull, true); // À CORRIGIR
  }
}
